/*
 * Copyright (C) 2005 - 2020 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.
 * Licensed pursuant to commercial TIBCO End User License Agreement.
 */

define(["require","exports","module","../BaseInputControlView","jquery","underscore","runtime_dependencies/js-sdk/src/components/dateAndTime/DateAndTimePicker","text!../../template/singleValueDateTemplate.htm","settings!dateTimeSettings","runtime_dependencies/js-sdk/src/common/util/parse/date"],function(e,t,i){function n(e){return e.toUpperCase().replace(/([\s]+$|^[\s]+)/g,"").replace(/[\s]*(\+|\-)[\s]*/g,"$1")}var a=e("../BaseInputControlView"),s=e("jquery"),d=e("underscore"),o=e("runtime_dependencies/js-sdk/src/components/dateAndTime/DateAndTimePicker"),r=e("text!../../template/singleValueDateTemplate.htm"),l=e("settings!dateTimeSettings"),u=e("runtime_dependencies/js-sdk/src/common/util/parse/date");i.exports=a.extend({template:r,initialize:function(){this.renderStructure(),this.renderState(),this.model.get("visible")&&(this.setupCalendar(),this.bindCustomEventListeners()),this.model.get("readOnly")&&this.disable(),this.updateWarningMessage()},setupCalendar:function(){var e=this,t=this.$el.find("input"),i=this.model.get("dataType"),a=null,r=null;i&&(i.minValue&&(a=u.iso8601DateToMoment(i.minValue),i.strictMin&&a.add(1,"d"),a=u.momentToLocalizedDate(a)),i.maxValue&&(r=u.iso8601DateToMoment(i.maxValue),i.strictMax&&r.subtract(1,"d"),r=u.momentToLocalizedDate(r))),this.picker=new o({el:t,currentText:l.datepicker.currentText,dateFormat:l.datepicker.dateFormat,disabled:t[0].disabled,onSelect:d.bind(this.updateState,this),minDate:a,maxDate:r}),t.change(d.bind(function(e){e.stopPropagation();var t=s(e.target),i=n(t.val());t.val(i),this.updateState(i)},this)),this.$el.find(".jr-mInput-datetrigger").on("click",function(){e.picker.show()})},updateValue:function(e){var t=u.isoDateToLocalizedDate(e);this.$el.find("input").val(t)},updateState:function(e){this.model.changeState(u.localizedDateToIsoDate(e))},bindCustomEventListeners:function(){this.listenTo(this.model.state,"change:value",function(e,t){this.updateValue(t)},this),this.listenTo(this.model.state,"reset change",this.updateWarningMessage,this)},remove:function(){this.picker.remove(),a.prototype.remove.call(this)}})});