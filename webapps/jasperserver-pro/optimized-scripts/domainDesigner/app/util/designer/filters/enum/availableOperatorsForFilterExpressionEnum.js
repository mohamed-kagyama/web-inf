/*
 * Copyright (C) 2005 - 2020 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.
 * Licensed pursuant to commercial TIBCO End User License Agreement.
 */

define(["require","exports","module","../../../../../model/schema/enum/genericTypesEnum","../../../../../model/schema/enum/filterOperandTypesEnum","../../../../model/enum/clientExpressionsEnum","bundle!DomainDesignerBundle","runtime_dependencies/js-sdk/src/common/util/i18nMessage"],function(e,r,o){var a=e("../../../../../model/schema/enum/genericTypesEnum"),n=e("../../../../../model/schema/enum/filterOperandTypesEnum"),t=e("../../../../model/enum/clientExpressionsEnum"),s=e("bundle!DomainDesignerBundle"),i=e("runtime_dependencies/js-sdk/src/common/util/i18nMessage"),p=i.create(s),l={},d=[{label:p("domain.designer.filters.expression.operator.isOneOf"),operator:t.operators.in.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.isNotOneOf"),operator:t.operators.notIn.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.contains"),operator:t.functions.contains.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notContain"),operator:t.functions.notContains.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.startsWith"),operator:t.functions.startsWith.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notStartWith"),operator:t.functions.notStartsWith.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.endsWith"),operator:t.functions.endsWith.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notEndWith"),operator:t.functions.notEndsWith.name,rightOperand:n.LITERAL}],m=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.contains"),operator:t.functions.contains.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notContain"),operator:t.functions.notContains.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.startsWith"),operator:t.functions.startsWith.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notStartWith"),operator:t.functions.notStartsWith.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.endsWith"),operator:t.functions.endsWith.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notEndWith"),operator:t.functions.notEndsWith.name,rightOperand:n.VARIABLE}];l[a.STRING]={},l[a.STRING][n.LIST]=d,l[a.STRING][n.RANGE]=d,l[a.STRING][n.LITERAL]=d,l[a.STRING][n.VARIABLE]=m;var g=[{label:p("domain.designer.filters.expression.operator.isOneOf"),operator:t.operators.in.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.isNotOneOf"),operator:t.operators.notIn.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.greater"),operator:t.operators.greater.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.less"),operator:t.operators.less.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.greaterOrEqual"),operator:t.operators.greaterOrEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.lessOrEqual"),operator:t.operators.lessOrEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.between"),operator:t.operators.in.name,rightOperand:n.RANGE},{label:p("domain.designer.filters.expression.operator.notBetween"),operator:t.operators.notIn.name,rightOperand:n.RANGE}],E=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.greater"),operator:t.operators.greater.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.less"),operator:t.operators.less.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.greaterOrEqual"),operator:t.operators.greaterOrEqual.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.lessOrEqual"),operator:t.operators.lessOrEqual.name,rightOperand:n.VARIABLE}],A={};A[n.LIST]=g,A[n.RANGE]=g,A[n.LITERAL]=g,A[n.VARIABLE]=E,l[a.INTEGER]=A,l[a.DECIMAL]=A;var L=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.between"),operator:t.operators.in.name,rightOperand:n.RANGE},{label:p("domain.designer.filters.expression.operator.notBetween"),operator:t.operators.notIn.name,rightOperand:n.RANGE},{label:p("domain.designer.filters.expression.operator.after"),operator:t.operators.greater.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.before"),operator:t.operators.less.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.onOrAfter"),operator:t.operators.greaterOrEqual.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.onOrBefore"),operator:t.operators.lessOrEqual.name,rightOperand:n.LITERAL}],O=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.after"),operator:t.operators.greater.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.before"),operator:t.operators.less.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.onOrAfter"),operator:t.operators.greaterOrEqual.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.onOrBefore"),operator:t.operators.lessOrEqual.name,rightOperand:n.VARIABLE}],f={};f[n.LIST]=L,f[n.RANGE]=L,f[n.LITERAL]=L,f[n.VARIABLE]=O,l[a.DATE]=f,l[a.TIMESTAMP]=f,l[a.TIME]=f;var u=[{label:p("domain.designer.filters.expression.operator.isOneOf"),operator:t.operators.in.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.isNotOneOf"),operator:t.operators.notIn.name,rightOperand:n.LIST},{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.LITERAL},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.LITERAL}],I=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.VARIABLE},{label:p("domain.designer.filters.expression.operator.notEqual"),operator:t.operators.notEqual.name,rightOperand:n.VARIABLE}],h={};h[n.LIST]=u,h[n.RANGE]=u,h[n.LITERAL]=u,h[n.VARIABLE]=I,l[a.BOOLEAN]=h,l.EQUALS_OPERATOR_ONLY=[{label:p("domain.designer.filters.expression.operator.equals"),operator:t.operators.equals.name,rightOperand:n.LITERAL}],o.exports=l});