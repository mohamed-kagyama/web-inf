define(function(require, exports, module) {
var __disableStrictMode__ = "use strict";

var _ = require('underscore');

var allCollectionsMixin = require("../../../model/schema/mixin/allCollectionsMixin");

var entityUtil = require("../../../model/schema/util/entityUtil");

/*
 * Copyright (C) 2005 - 2020 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.
 * Licensed pursuant to commercial TIBCO End User License Agreement.
 */
var LABEL_SUFFIX = '.LABEL';
var DESCRIPTION_SUFFIX = '.DESCR';

var bundleTemplateLine = _.template('{{=template}}{{=key}}={{=value}}\r\n');

var ClientDomainSchemaAdvancedOptionsService = function ClientDomainSchemaAdvancedOptionsService(options) {
  this.initialize(options);
};

_.extend(ClientDomainSchemaAdvancedOptionsService.prototype, allCollectionsMixin, {
  initialize: function initialize(options) {
    this.dataStore = options.dataStore;
    this.mixInAllCollections(this.dataStore);
  },
  getBundleTemplate: function getBundleTemplate() {
    return this._getBundleTemplateForPresentationItems(this.dataIslands);
  },
  generateBundleKeys: function generateBundleKeys(options) {
    return this._generateBundleKeysForPresentationItems(this.dataIslands, options);
  },
  _generateBundleKeysForPresentationItems: function _generateBundleKeysForPresentationItems(presentationItems, options) {
    var self = this;
    return presentationItems.reduce(function (memo, presentationItem) {
      memo = memo.concat(self._generateBundleKeysForPresentationItem(presentationItem, options));
      return memo;
    }, []);
  },
  _generateBundleKeysForPresentationItem: function _generateBundleKeysForPresentationItem(presentationItem, options) {
    var autoGenerateLabelKeyIfMissing = options.autoGenerateLabelKeyIfMissing,
        autoGenerateDescriptionKeyIfMissing = options.autoGenerateDescriptionKeyIfMissing,
        name = presentationItem.getName().toUpperCase(),
        parentLabel = options.parentLabel || '',
        bundleKeys = [];
    var nameWithParent = parentLabel ? parentLabel + '.' + name : name;
    var bundleKeysForItem = {
      id: presentationItem.getId(),
      type: entityUtil.getEntityName(presentationItem)
    };

    if (autoGenerateLabelKeyIfMissing && !presentationItem.getLabelId()) {
      bundleKeysForItem.labelId = nameWithParent + LABEL_SUFFIX;
    } else if (presentationItem.getLabelId()) {
      bundleKeysForItem.labelId = presentationItem.getLabelId();
    }

    if (autoGenerateDescriptionKeyIfMissing && !presentationItem.getDescriptionId()) {
      bundleKeysForItem.descriptionId = nameWithParent + DESCRIPTION_SUFFIX;
    } else if (presentationItem.getDescriptionId()) {
      bundleKeysForItem.descriptionId = presentationItem.getDescriptionId();
    }

    if (bundleKeysForItem.labelId || bundleKeysForItem.descriptionId) {
      bundleKeys.push(bundleKeysForItem);
    }

    if (!entityUtil.isPresentationField(presentationItem)) {
      bundleKeys = bundleKeys.concat(this._generateBundleKeysForPresentationItems(presentationItem.getChildren(), _.extend({}, options, {
        parentLabel: nameWithParent
      })));
    }

    return bundleKeys;
  },
  _getBundleTemplateForPresentationItems: function _getBundleTemplateForPresentationItems(presentationItemsCollection) {
    var self = this;
    return presentationItemsCollection.reduce(function (memo, dataIsland) {
      return memo + self._getBundleTemplateForPresentationItem(dataIsland);
    }, '');
  },
  _getBundleTemplateForPresentationItem: function _getBundleTemplateForPresentationItem(presentationItem) {
    var labelKey = presentationItem.getLabelId(),
        descriptionKey = presentationItem.getDescriptionId(),
        template = '',
        self = this;

    if (labelKey) {
      template = bundleTemplateLine({
        template: template,
        key: labelKey,
        value: self._getLabelValue(presentationItem)
      });
    }

    if (descriptionKey) {
      template = bundleTemplateLine({
        template: template,
        key: descriptionKey,
        value: self._getDescriptionValue(presentationItem)
      });
    }

    if (!entityUtil.isPresentationField(presentationItem)) {
      template = template + this._getBundleTemplateForPresentationItems(presentationItem.getChildren());
    }

    return template;
  },
  _getLabelValue: function _getLabelValue(presentationItem) {
    return presentationItem.getLabel() || '';
  },
  _getDescriptionValue: function _getDescriptionValue(presentationItem) {
    return presentationItem.getDescription() || '';
  }
});

module.exports = ClientDomainSchemaAdvancedOptionsService;

});